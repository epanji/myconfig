;; -*-lisp-*-

(in-package :stumpwm)

(set-prefix-key (kbd "C-ESC"))

;;; Load xmodmap
;;; !
;;; ! Change Caps_Lock to Control_L
;;; !
;;; remove Lock = Caps_Lock
;;; add Control = Caps_Lock
;;; keysym Caps_Lock = Control_L
(run-shell-command "xmodmap ~/.xmodmaprc &> /dev/null")

;;; Start amixer
(load-module "amixer")
(define-interactive-keymap volume-control ()
  ((kbd ".") "amixer-master-1+")
  ((kbd ",") "amixer-master-1-")
  ((kbd "C-.") "exit-volume-control")
  ((kbd "C-,") "exit-volume-control"))
(define-key *root-map* (kbd ".") "volume-control")
(define-key *root-map* (kbd ",") "volume-control")
;;; End amixer

(load-module "stump-backlight")
(load-module "stump-volume-control")

(setf *window-number-map* "1234567890")
(setf *mouse-focus-policy* :click) ;; :click, :ignore, :sloppy
;; (setf *default-selections* '(:clipboard nil))
;; (setf *input-completion-style* (make-input-completion-style-unambiguous))
;; (change-default-layout :right)
;; (change-default-split-ratio 4/5)

(define-key *root-map* (kbd "M-l") "exec xlock")
(define-key *root-map* (kbd "C-p") "mode-line")
(define-key *root-map* (kbd "C-q") "echo-sensors")
(define-key *root-map* (kbd "C-f") "echo-fortune")
(define-key *root-map* (kbd "C-t") "exec konsole")
(define-key *root-map* (kbd "s-e") "exec dolphin")
(define-key *root-map* (kbd "Menu") "command-mode")
(define-key *root-map* (kbd "[") "resize-increment 1 y")
(define-key *root-map* (kbd "]") "resize-increment 10 y")
(define-key *root-map* (kbd "C-w") "windowlist")
(define-key *root-map* (kbd "C-DEL") "gc")
;; (define-key *root-map* (kbd "s-q") "exec loginctl poweroff")
;; (define-key *root-map* (kbd "C-z") "suspend")

(defcommand gc () ()
  (sb-ext:gc :full t)
  (message "Garbage collected."))

(defcommand (resize-increment tile-group) (delta iresize-p)
    ((:number "Delta (number): ")
     (:y-or-n "Execute iresize? "))
  (setf *resize-increment* delta)
  (when iresize-p (iresize)))

;; Need authority for org.freedesktop.login1 to be worked.
(defcommand suspend () ()
  (run-shell-command
   (format nil "dbus-send ~
           --system ~
           --print-reply ~
           --dest='org.freedesktop.login1' ~
           /org/freedesktop/login1 ~
           org.freedesktop.login1.Manager.Suspend ~
           boolean:false") t))

(defcommand reboot () ()
  (run-shell-command
   (format nil "dbus-send ~
           --system ~
           --print-reply ~
           --dest='org.freedesktop.login1' ~
           /org/freedesktop/login1 ~
           org.freedesktop.login1.Manager.Reboot ~
           boolean:false") t))

(defcommand power-off () ()
  (run-shell-command
   (format nil "dbus-send ~
           --system ~
           --print-reply ~
           --dest='org.freedesktop.login1' ~
           /org/freedesktop/login1 ~
           org.freedesktop.login1.Manager.PowerOff ~
           boolean:false") t))

(defun idle-suspend (&optional (secs 300) debugp)
  (let ((idle (idle-time (current-screen)))
        (windows (mapcar 'window-class (all-windows)))
        (exceptions (list "MPlayer" "xine" "Player" "QMLPlayer" "dragonplayer" "mGBA" "mgba")))
    (if (and (< secs idle)
             (null (intersection windows exceptions :test 'string=)))
        (suspend)
        (when debugp (message "Idle time: ~D seconds" idle)))))

(defvar *suspend-timer* (run-with-timer 0 60 'idle-suspend 300 nil))

(defcommand run-suspend-timer () ()
  (when (and (timer-p *suspend-timer*)
             (not (find *suspend-timer* *timer-list*)))
    (schedule-timer *suspend-timer* 10)
    (labels ((append-to-list ()
               (sb-thread:with-mutex (*timer-list-lock*)
                 (setf *timer-list*
                       (merge 'list *timer-list* (list *suspend-timer*)
                              #'< :key #'timer-time)))))
      (call-in-main-thread #'append-to-list)))
  (message "~{~A~%~}" *timer-list*))

(defcommand cancel-suspend-timer () ()
  (if (and (timer-p *suspend-timer*)
           (find *suspend-timer* *timer-list*))
      (progn (cancel-timer *suspend-timer*)
             (message "Suspend timer cancelled."))
      (message "No suspend timer.")))

;; Need feh application.
(run-shell-command
 (format nil "feh ~A ~A" "--bg-scale"
         (merge-pathnames
          (format nil "Pictures/background-~3,'0D.png"
                  (1+ (random 10)))
          (user-homedir-pathname))))

(defcommand echo-sensors () ()
  (message "~A" (subseq (run-shell-command "sensors asus-isa-0000 | grep temp1:" t) 12)))

;; Need fortune and flite applications.
(defcommand echo-fortune () ()
  (let ((*message-window-gravity* :center)
        (*message-window-padding* 50)
        (*message-window-y-padding* 30))
    (let ((text (substitute #\space #\tab (run-shell-command "fortune" t)))
          (pitch (write-to-string (+ 200 (* (random 10) 10)))))
      (message-no-timeout "~A" text)
      (run-shell-command
       (concatenate 'string
                    "flite -voice slt "
                    "--setf int_f0_target_mean="
                    pitch " "
                    "--setf duration_stretch=1.25 -t "
                    (write-to-string (remove #\" text)))))))

(defcommand (small-window-float tile-group) () ()
  (let ((*float-window-title-height* 1))
    (float-window (current-window) (current-group))
    (float-window-move-resize (current-window)
                              :x 1008 :y 547 :width 332 :height 187)
    (pushnew (current-window) (group-on-top-windows (current-group)))))

(load (merge-pathnames "swank-loader.lisp" (asdf:system-source-directory "swank")))
(swank-loader:init)

(defcommand swank () ()
  (let ((create-server-p t)
        (port 5005)
        (style swank:*communication-style*))
    (handler-case (swank:create-server :port port :style style :dont-close t)
      (error () (when (y-or-n-p "Stop server? ") (setf create-server-p nil))))
    (if create-server-p
        (message "M-x slime-connect using port ~A" port)
        (message "(swank:stop-server ~A)"
                 (prog1 port (swank:stop-server port))))))

(define-frame-preference "Default" (0 t nil :class "Firefox")
  (1 t nil :class "MPlayer")
  (2 t nil :class "XTerm")
  (:float t nil :class "xine")
  (:float t nil :title "SANVERTER"))

;; (define-frame-preference "Emacs" (1 t nil :title "Demo")
;;   (0 t t :restore "Emacs" :class "Emacs"))

;; (define-frame-preference "Rec" (2 t nil :class "XTerm")
;;   (0 t nil :instance "pavucontrol")
;;   (1 t t :instance "simplescreenrecorder" :create "Rec" :restore "Rec"))

;;; Start Theme
(progn
  (setf *float-window-title-height* 1)
  (setf *colors* '("black" "red" "green" "yellow" "blue" "cyan" "orange" "white"))
  (set-bg-color "purple4")
  (set-border-color "purple3")
  (set-float-focus-color "purple3")
  (set-float-unfocus-color "gray65")
  (update-color-map (current-screen)))
;;; End Theme

;;; Start patches
(ql:quickload :generic-structure-reader)
(cl:use-package :generic-structure-reader)

(define-generic-structure-reader mode-line-height (mode-line)
  (:method ((object null)) 0))

;; (define-generic-structure-reader frame-number (frame)
;;   (:method ((object null)) nil))

;; (define-generic-structure-reader head-number (head)
;;   (:method ((object null)) nil))

;; (define-generic-structure-reader frame-x (frame)
;;   (:method ((object null)) 0))

;; (define-generic-structure-reader frame-y (frame)
;;   (:method ((object null)) 0))

;; (define-generic-structure-reader head-x (head)
;;   (:method ((object null)) 0))

;; (define-generic-structure-reader head-y (head)
;;   (:method ((object null)) 0))

(defun window-property (window prop)
  (handler-case (xlib:get-property (window-xwin window) prop)
    (xlib:window-error () (delete-window window) nil)))
;;; End patches
