;; -*-lisp-*-

(in-package :stumpwm)

(set-prefix-key (kbd "C-ESC"))

;;; Start amixer
(load-module "amixer")
(define-interactive-keymap volume-control ()
  ((kbd ".") "amixer-master-1+")
  ((kbd ",") "amixer-master-1-")
  ((kbd "C-.") "exit-volume-control")
  ((kbd "C-,") "exit-volume-control"))
(define-key *root-map* (kbd ".") "volume-control")
(define-key *root-map* (kbd ",") "volume-control")
;;; End amixer

(setf *window-number-map* "1234567890")
(setf *mouse-focus-policy* :click) ;; :click, :ignore, :sloppy
;; (setf *default-selections* '(:clipboard nil))
;; (setf *input-completion-style* (make-input-completion-style-unambiguous))

(define-key *root-map* (kbd "M-l") "exec xlock")
(define-key *root-map* (kbd "C-p") "mode-line")
(define-key *root-map* (kbd "C-q") "echo-sensors")
(define-key *root-map* (kbd "C-f") "echo-fortune")
(define-key *root-map* (kbd "C-t") "exec konsole")
(define-key *root-map* (kbd "s-e") "exec dolphin")
(define-key *root-map* (kbd "Menu") "command-mode")
(define-key *root-map* (kbd "M-F2") "find-applications")
(define-key *root-map* (kbd "[") "resize-increment 1 y")
(define-key *root-map* (kbd "]") "resize-increment 10 y")

(defcommand resize-increment (delta iresize-p)
    ((:number "Delta (number): ")
     (:y-or-n "Execute iresize? "))
  (setf *resize-increment* delta)
  (when iresize-p (iresize)))

;; Need authority for org.freedesktop.upower.policy to be worked.
(define-key *root-map* (kbd "XF86Sleep") "suspend")
(defcommand suspend () ()
  (run-shell-command
   (format nil "dbus-send ~A ~A ~A ~A ~A"
           "--system"
           "--print-reply"
           "--dest='org.freedesktop.UPower'"
           "/org/freedesktop/UPower"
           "org.freedesktop.UPower.Suspend")))

;; Need feh application.
(run-shell-command (format nil "~A ~A" "feh --bg-scale"
                           (merge-pathnames "Pictures/background-001.png"
                                            (user-homedir-pathname))))

(defcommand echo-sensors () ()
  (message "~A" (subseq (run-shell-command "sensors | grep temp1:" t) 12)))

;; Need fortune and flite applications.
(defcommand echo-fortune () ()
  (let ((*message-window-gravity* :center)
        (*message-window-padding* 50)
        (*message-window-y-padding* 30)
        (*timeout-wait* 10))
    (let ((text (substitute #\space #\tab (run-shell-command "fortune" t)))
          (pitch (write-to-string (+ 200 (* (random 10) 10)))))
      (message "~A" text)
      (run-shell-command
       (concatenate 'string
                    "flite -voice slt "
                    "--setf int_f0_target_mean="
                    pitch " "
                    "--setf duration_stretch=1.25 -t "
                    (write-to-string (remove #\" text)))))))

(defcommand find-applications () ()
  (run-shell-command "xfce4-appfinder"))

(defcommand small-window-float () ()
  (float-window (current-window) (current-group))
  (float-window-move-resize (current-window)
                            :x 1008 :y 547 :width 332 :height 187)
  (pushnew (current-window) (group-on-top-windows (current-group))))

(load (merge-pathnames
       "swank-loader.lisp"
       (asdf:system-source-directory
        (asdf:find-system :swank))))
(swank-loader:init)

(defcommand swank () ()
  (let ((create-server-p t)
        (port 5005)
        (style swank:*communication-style*))
    (handler-case (swank:create-server :port port :style style :dont-close t)
      (error () (when (y-or-n-p "Stop server? ") (setf create-server-p nil))))
    (if create-server-p
        (message "M-x slime-connect using port ~A" port)
        (message "(swank:stop-server ~A)"
                 (progn (swank:stop-server port) port)))))

(define-frame-preference "Default" (0 t nil :class "Firefox")
  (1 t nil :class "MPlayer")
  (2 t nil :class "XTerm"))

(define-frame-preference "Emacs" (1 t nil :title "Demo")
  (0 t t :restore "Emacs.group" :class "Emacs"))

(define-frame-preference "Rec" (2 t nil :class "XTerm")
  (0 t nil :instance "pavucontrol")
  (1 t t :instance "simplescreenrecorder" :create "Rec.group" :restore "Rec.group"))

;;; Start patches
(ql:quickload :generic-structure-reader)
(cl:use-package :generic-structure-reader)

(define-generic-structure-reader mode-line-height (mode-line)
  (:method ((object null)) 0))

;; (define-generic-structure-reader frame-number (frame)
;;   (:method ((object null)) nil))
;;
;; (define-generic-structure-reader head-number (head)
;;   (:method ((object null)) nil))

(define-generic-structure-reader frame-x (frame)
  (:method ((object null)) 0))

(define-generic-structure-reader frame-y (frame)
  (:method ((object null)) 0))

(define-generic-structure-reader head-x (head)
  (:method ((object null)) 0))

(define-generic-structure-reader head-y (head)
  (:method ((object null)) 0))

(defun window-property (window prop)
  (handler-case (xlib:get-property (window-xwin window) prop)
    (xlib:window-error () (delete-window window) nil)))
;;; End patches
