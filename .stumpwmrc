;; -*-lisp-*-

(in-package :stumpwm)

(set-prefix-key (kbd "C-ESC"))

(load-module "amixer")

(setf *mouse-focus-policy* :click) ;; :click, :ignore, :sloppy

(define-key *root-map* (kbd "M-l") "exec xlock")
(define-key *root-map* (kbd "C-p") "mode-line")
(define-key *root-map* (kbd "C-q") "echo-sensors")
(define-key *root-map* (kbd "C-f") "echo-fortune")
(define-key *root-map* (kbd "C-t") "exec konsole")
(define-key *root-map* (kbd "s-e") "exec dolphin")
(define-key *root-map* (kbd ",") "amixer-master-1-")
(define-key *root-map* (kbd ".") "amixer-master-1+")
(define-key *root-map* (kbd "Menu") "command-mode")
(define-key *root-map* (kbd "M-F2") "find-applications")

;; Need authority for org.freedesktop.upower.policy to be worked.
(define-key *root-map* (kbd "XF86Sleep") "suspend")
(defcommand suspend () ()
  (run-shell-command
   (format nil "dbus-send ~a ~a ~a ~a ~a"
           "--system"
           "--print-reply"
           "--dest='org.freedesktop.UPower'"
           "/org/freedesktop/UPower"
           "org.freedesktop.UPower.Suspend")))

;; Need feh application.
(run-shell-command (format nil "~a ~a" "feh --bg-scale"
                           (merge-pathnames "Pictures/background-001.png"
                                            (user-homedir-pathname))))

(defcommand echo-sensors () ()
  (message "~a" (subseq (run-shell-command "sensors | grep temp1:" t) 12)))

(defcommand echo-fortune () ()
  (let ((*message-window-gravity* :center)
        (*timeout-wait* 10))
    (message "~a" (substitute #\space #\tab (run-shell-command "fortune" t)))))

(defcommand find-applications () ()
  (run-shell-command "xfce4-appfinder"))

(defcommand small-window-float () ()
  (float-window (current-window) (current-group))
  (float-window-move-resize (current-window)
                            :x 1008 :y 547 :width 332 :height 187)
  (pushnew (current-window) (group-on-top-windows (current-group))))

(load (merge-pathnames
       "swank-loader.lisp"
       (asdf:system-source-directory
        (asdf:find-system :swank))))
(swank-loader:init)

(defcommand swank () ()
  (let ((create-server-p t)
        (port 5005)
        (style swank:*communication-style*))
    (handler-case (swank:create-server :port port :style style :dont-close t)
      (error () (when (y-or-n-p "Stop server? ") (setf create-server-p nil))))
    (if create-server-p
        (message "M-x slime-connect using port ~a" port)
        (message "(swank:stop-server ~a)"
                 (progn (swank:stop-server port) port)))))

(define-frame-preference "Default" (nil nil nil)
  (0 t nil :class "Firefox")
  (1 t nil :class "Mplayer")
  (2 t nil :class "XTerm"))

(define-frame-preference "Demo" (nil nil nil)
  (0 t nil :class "Emacs")
  (1 t nil :title "Demo"))

;;;; for debug only
;; (setf *ignore-wm-inc-hints* t)
;; (setf *normal-border-width* 4)
;; (setf *transient-border-width* 3)
;; (setf *float-window-border* 5)
;; (setf *float-window-title-height* 10)
;; (redirect-all-output (data-dir-file "debug-output" "txt"))
;; (setf *debug-level* 3) ;; default 0
;; (setf *top-level-error-action* :break)
;; (setf *debug-expose-events* nil)
;; (defcommand show-message-for-debug () ()
;;   (with-open-file (stream "/home/panji/stumpwm-last-message.txt"
;;                           :direction :output
;;                           :if-exists :supersede
;;                           :if-does-not-exist :create)
;;     (format stream "~a" (first (screen-last-msg (current-screen)))))
;;   (message "screen~10t: ~a~&group~10t: ~a~&head~10t: ~a~&window~10t: ~a~&"
;;            (current-screen)
;;            (current-group)
;;            (current-head)
;;            (current-window)))
;; (define-key *root-map* (kbd "Tab") "show-message-for-debug")
